yates.effects(Fac4Proc.aov, error.term="Runs", data=Fac4Proc.dat)
round(yates.effects(Fac4Proc.aov, error.term="Runs", data=Fac4Proc.dat), 2)
df_yates = as.data.frame(matrix(data=c(min(f1),max(f1),min(f1),max(f1),min(f2),min(f2),max(f2),max(f2)),nrow=4,ncol=2))
colnames(df_yates) = c("f1","f2")
predict_output_answer = data.frame(predict(lm_5, newdata=df_yates, interval="prediction"))
df_yates = cbind(df_yates, predict_output_answer[,"fit"])
colnames(df_yates) = c("f1","f2","answer")
df_yates
df_yates = as.data.frame(matrix(data=c(min(f1),max(f1),min(f1),max(f1),min(f2),min(f2),max(f2),max(f2)),nrow=4,ncol=2))
colnames(df_yates) = c("f1","f2")
predict_output_answer = data.frame(predict(lm_5, newdata=df_yates, interval="prediction"))
df_yates = cbind(df_yates, predict_output_answer[,"fit"])
colnames(df_yates) = c("f1","f2","answer")
df_yates
View(df)
df_yates = rbind(df_yates,df_yates)
df_yates
df_yates["newcol"] = c(0,0,0,0,0,0,0,0)
df_yates
df_yates["f10"] = c(min(f10),min(f10),min(f10),min(f10),max(f10),max(f10),max(f10),max(f10))
df_yates
df_yates["newcol"] = NULL
df_yates
df_yates = df_yates[c("f1","f2","f10","answer")]
df_yates
answer=c(51,50.5,47,46.5,11,10.5,7,6.5)
answer
answer=as.data.frame(c(51,50.5,47,46.5,11,10.5,7,6.5))
answer
colnames(answer) = c("answer")
answer
answer["answer",1]
answer["answer"]
answer["answer",0]
answer[1,1]
answer[1,2]
answer[2,1]
answer[2,"answer"]
answer["point1"] = c(answer[1,"answer"]+answer[2,"answer"],answer[3,"answer"]+answer[4,"answer"],answer[5,"answer"]+answer[6,"answer"],answer[7,"answer"]+answer[8,"answer"],answer[2,"answer"]-answer[1,"answer"],answer[4,"answer"]-answer[3,"answer"],answer[6,"answer"]-answer[5,"answer"],answer[8,"answer"]-answer[7,"answer"])
answer
answer
answer["point2"] = c(answer[1,"point1"]+answer[2,"point1"],answer[3,"point1"]+answer[4,"point1"],answer[5,"point1"]+answer[6,"point1"],answer[7,"point1"]+answer[8,"point1"],answer[2,"point1"]-answer[1,"point1"],answer[4,"point1"]-answer[3,"point1"],answer[6,"point1"]-answer[5,"point1"],answer[8,"point1"]-answer[7,"point1"])
answer
answer["point3"] = c(answer[1,"point2"]+answer[2,"point2"],answer[3,"point2"]+answer[4,"point2"],answer[5,"point2"]+answer[6,"point2"],answer[7,"point2"]+answer[8,"point2"],answer[2,"point2"]-answer[1,"point2"],answer[4,"point2"]-answer[3,"point2"],answer[6,"point2"]-answer[5,"point2"],answer[8,"point2"]-answer[7,"point2"])
answer
answer["point3"] = c(answer[1,"point2"]+answer[2,"point2"],answer[3,"point2"]+answer[4,"point2"],answer[5,"point2"]+answer[6,"point2"],answer[7,"point2"]+answer[8,"point2"],answer[2,"point2"]-answer[1,"point2"],answer[4,"point2"]-answer[3,"point2"],answer[6,"point2"]-answer[5,"point2"],answer[8,"point2"]-answer[7,"point2"])
answer["result"] = c(answer[1,"point3"]+answer[2,"point3"],answer[3,"point3"]+answer[4,"point3"],answer[5,"point3"]+answer[6,"point3"],answer[7,"point3"]+answer[8,"point3"],answer[2,"point3"]-answer[1,"point3"],answer[4,"point3"]-answer[3,"point3"],answer[6,"point3"]-answer[5,"point3"],answer[8,"point3"]-answer[7,"point3"])
answer
answer["result"] = c(answer[1,"point3"]/8,answer[2,"point3"]/4,answer[3,"point3"]/4,answer[4,"point3"]/4,answer[5,"point3"]/4,answer[6,"point3"]/4,answer[7,"point3"]/4,answer[8,"point3"]/4)
answer
mp <- c("-", "+")
mp
fnames <- list(f1 = mp, f2 = mp, f10 = mp)
fnames
Fac4Proc.Treats <- fac.gen(generate = fnames, order="yates")
Fac4Proc.Treats
answer=as.data.frame(df_yates["answer"])
colnames(answer) = c("answer")
answer[1,"answer"]
answer["point1"] = c(answer[1,"answer"]+answer[2,"answer"],answer[3,"answer"]+answer[4,"answer"],answer[5,"answer"]+answer[6,"answer"],answer[7,"answer"]+answer[8,"answer"],answer[2,"answer"]-answer[1,"answer"],answer[4,"answer"]-answer[3,"answer"],answer[6,"answer"]-answer[5,"answer"],answer[8,"answer"]-answer[7,"answer"])
answer["point2"] = c(answer[1,"point1"]+answer[2,"point1"],answer[3,"point1"]+answer[4,"point1"],answer[5,"point1"]+answer[6,"point1"],answer[7,"point1"]+answer[8,"point1"],answer[2,"point1"]-answer[1,"point1"],answer[4,"point1"]-answer[3,"point1"],answer[6,"point1"]-answer[5,"point1"],answer[8,"point1"]-answer[7,"point1"])
answer["point3"] = c(answer[1,"point2"]+answer[2,"point2"],answer[3,"point2"]+answer[4,"point2"],answer[5,"point2"]+answer[6,"point2"],answer[7,"point2"]+answer[8,"point2"],answer[2,"point2"]-answer[1,"point2"],answer[4,"point2"]-answer[3,"point2"],answer[6,"point2"]-answer[5,"point2"],answer[8,"point2"]-answer[7,"point2"])
answer["result"] = c(answer[1,"point3"]/8,answer[2,"point3"]/4,answer[3,"point3"]/4,answer[4,"point3"]/4,answer[5,"point3"]/4,answer[6,"point3"]/4,answer[7,"point3"]/4,answer[8,"point3"]/4)
answer
answer["f1"]=Fac4Proc.Treats["f1"]
answer["f2"]=Fac4Proc.Treats["f2"]
answer["f10"]=Fac4Proc.Treats["f10"]
answer
df_yates
df_yates = as.data.frame(matrix(data=c(min(f1),max(f1),min(f1),max(f1),0,0,max(f2),max(f2)),nrow=4,ncol=2))
colnames(df_yates) = c("f1","f2")
predict_output_answer = data.frame(predict(lm_5, newdata=df_yates, interval="prediction"))
df_yates = cbind(df_yates, predict_output_answer[,"fit"])
colnames(df_yates) = c("f1","f2","answer")
df_yates = rbind(df_yates,df_yates)
df_yates["f10"] = c(min(f10),min(f10),min(f10),min(f10),max(f10),max(f10),max(f10),max(f10))
df_yates = df_yates[c("f1","f2","f10","answer")]
answer=as.data.frame(df_yates["answer"])
colnames(answer) = c("answer")
answer[1,"answer"]
answer["point1"] = c(answer[1,"answer"]+answer[2,"answer"],answer[3,"answer"]+answer[4,"answer"],answer[5,"answer"]+answer[6,"answer"],answer[7,"answer"]+answer[8,"answer"],answer[2,"answer"]-answer[1,"answer"],answer[4,"answer"]-answer[3,"answer"],answer[6,"answer"]-answer[5,"answer"],answer[8,"answer"]-answer[7,"answer"])
answer["point2"] = c(answer[1,"point1"]+answer[2,"point1"],answer[3,"point1"]+answer[4,"point1"],answer[5,"point1"]+answer[6,"point1"],answer[7,"point1"]+answer[8,"point1"],answer[2,"point1"]-answer[1,"point1"],answer[4,"point1"]-answer[3,"point1"],answer[6,"point1"]-answer[5,"point1"],answer[8,"point1"]-answer[7,"point1"])
answer["point3"] = c(answer[1,"point2"]+answer[2,"point2"],answer[3,"point2"]+answer[4,"point2"],answer[5,"point2"]+answer[6,"point2"],answer[7,"point2"]+answer[8,"point2"],answer[2,"point2"]-answer[1,"point2"],answer[4,"point2"]-answer[3,"point2"],answer[6,"point2"]-answer[5,"point2"],answer[8,"point2"]-answer[7,"point2"])
answer["result"] = c(answer[1,"point3"]/8,answer[2,"point3"]/4,answer[3,"point3"]/4,answer[4,"point3"]/4,answer[5,"point3"]/4,answer[6,"point3"]/4,answer[7,"point3"]/4,answer[8,"point3"]/4)
mp <- c("-", "+")
mp
fnames <- list(f1 = mp, f2 = mp, f10 = mp)
fnames
Fac4Proc.Treats <- fac.gen(generate = fnames, order="yates")
Fac4Proc.Treats
answer["f1"]=Fac4Proc.Treats["f1"]
answer["f2"]=Fac4Proc.Treats["f2"]
answer["f10"]=Fac4Proc.Treats["f10"]
answer
df_yates = as.data.frame(matrix(data=c(min(f1),max(f1),min(f1),max(f1),10,10,max(f2),max(f2)),nrow=4,ncol=2))
colnames(df_yates) = c("f1","f2")
predict_output_answer = data.frame(predict(lm_5, newdata=df_yates, interval="prediction"))
df_yates = cbind(df_yates, predict_output_answer[,"fit"])
colnames(df_yates) = c("f1","f2","answer")
df_yates = rbind(df_yates,df_yates)
df_yates["f10"] = c(min(f10),min(f10),min(f10),min(f10),max(f10),max(f10),max(f10),max(f10))
df_yates = df_yates[c("f1","f2","f10","answer")]
answer=as.data.frame(df_yates["answer"])
colnames(answer) = c("answer")
answer[1,"answer"]
answer["point1"] = c(answer[1,"answer"]+answer[2,"answer"],answer[3,"answer"]+answer[4,"answer"],answer[5,"answer"]+answer[6,"answer"],answer[7,"answer"]+answer[8,"answer"],answer[2,"answer"]-answer[1,"answer"],answer[4,"answer"]-answer[3,"answer"],answer[6,"answer"]-answer[5,"answer"],answer[8,"answer"]-answer[7,"answer"])
answer["point2"] = c(answer[1,"point1"]+answer[2,"point1"],answer[3,"point1"]+answer[4,"point1"],answer[5,"point1"]+answer[6,"point1"],answer[7,"point1"]+answer[8,"point1"],answer[2,"point1"]-answer[1,"point1"],answer[4,"point1"]-answer[3,"point1"],answer[6,"point1"]-answer[5,"point1"],answer[8,"point1"]-answer[7,"point1"])
answer["point3"] = c(answer[1,"point2"]+answer[2,"point2"],answer[3,"point2"]+answer[4,"point2"],answer[5,"point2"]+answer[6,"point2"],answer[7,"point2"]+answer[8,"point2"],answer[2,"point2"]-answer[1,"point2"],answer[4,"point2"]-answer[3,"point2"],answer[6,"point2"]-answer[5,"point2"],answer[8,"point2"]-answer[7,"point2"])
answer["result"] = c(answer[1,"point3"]/8,answer[2,"point3"]/4,answer[3,"point3"]/4,answer[4,"point3"]/4,answer[5,"point3"]/4,answer[6,"point3"]/4,answer[7,"point3"]/4,answer[8,"point3"]/4)
mp <- c("-", "+")
mp
fnames <- list(f1 = mp, f2 = mp, f10 = mp)
fnames
Fac4Proc.Treats <- fac.gen(generate = fnames, order="yates")
Fac4Proc.Treats
answer["f1"]=Fac4Proc.Treats["f1"]
answer["f2"]=Fac4Proc.Treats["f2"]
answer["f10"]=Fac4Proc.Treats["f10"]
answer
df_yates = as.data.frame(matrix(data=c(min(f1),max(f1),min(f1),max(f1),min(f2),min(f2),max(f2),max(f2)),nrow=4,ncol=2))
colnames(df_yates) = c("f1","f2")
predict_output_answer = data.frame(predict(lm_5, newdata=df_yates, interval="prediction"))
df_yates = cbind(df_yates, predict_output_answer[,"fit"])
colnames(df_yates) = c("f1","f2","answer")
df_yates = rbind(df_yates,df_yates)
df_yates["f10"] = c(min(f10),min(f10),min(f10),min(f10),max(f10),max(f10),max(f10),max(f10))
df_yates = df_yates[c("f1","f2","f10","answer")]
answer=as.data.frame(df_yates["answer"])
colnames(answer) = c("answer")
answer[1,"answer"]
answer["point1"] = c(answer[1,"answer"]+answer[2,"answer"],answer[3,"answer"]+answer[4,"answer"],answer[5,"answer"]+answer[6,"answer"],answer[7,"answer"]+answer[8,"answer"],answer[2,"answer"]-answer[1,"answer"],answer[4,"answer"]-answer[3,"answer"],answer[6,"answer"]-answer[5,"answer"],answer[8,"answer"]-answer[7,"answer"])
answer["point2"] = c(answer[1,"point1"]+answer[2,"point1"],answer[3,"point1"]+answer[4,"point1"],answer[5,"point1"]+answer[6,"point1"],answer[7,"point1"]+answer[8,"point1"],answer[2,"point1"]-answer[1,"point1"],answer[4,"point1"]-answer[3,"point1"],answer[6,"point1"]-answer[5,"point1"],answer[8,"point1"]-answer[7,"point1"])
answer["point3"] = c(answer[1,"point2"]+answer[2,"point2"],answer[3,"point2"]+answer[4,"point2"],answer[5,"point2"]+answer[6,"point2"],answer[7,"point2"]+answer[8,"point2"],answer[2,"point2"]-answer[1,"point2"],answer[4,"point2"]-answer[3,"point2"],answer[6,"point2"]-answer[5,"point2"],answer[8,"point2"]-answer[7,"point2"])
answer["result"] = c(answer[1,"point3"]/8,answer[2,"point3"]/4,answer[3,"point3"]/4,answer[4,"point3"]/4,answer[5,"point3"]/4,answer[6,"point3"]/4,answer[7,"point3"]/4,answer[8,"point3"]/4)
mp <- c("-", "+")
mp
fnames <- list(f1 = mp, f2 = mp, f10 = mp)
fnames
Fac4Proc.Treats <- fac.gen(generate = fnames, order="yates")
Fac4Proc.Treats
answer["f1"]=Fac4Proc.Treats["f1"]
answer["f2"]=Fac4Proc.Treats["f2"]
answer["f10"]=Fac4Proc.Treats["f10"]
answer
df_yates
answer[5:8]
answer
f1 = runif(10000, min = 0, max = 10)
f2 = rnorm(10000, mean = 0, sd = 10)
f3 = rexp(10000, rate = 10)
f4 = rpois(10000, lambda = 10)
f5 = rbinom(10000, 100, 0.5)
f6 = f1+2*f2
f6 = f1+2*f2 + rnorm(10000, mean=mean(f6)*runif(1,0.1,0.2), sd=sd(f6)*runif(1,0.1,0.2))
f7 = -f1
f7 = -f1 + rnorm(10000, mean=mean(f7)*runif(1,0.1,0.2), sd=sd(f7)*runif(1,0.1,0.2))
f8 = (f5 - f1 - f4)/5
f8 = (f5 - f1 - f4)/5 + rnorm(10000, mean=mean(f8)*runif(1,0.1,0.2), sd=sd(f8)*runif(1,0.1,0.2))
f9 = -f4+f2
f9 = -f4+f2 + rnorm(10000, mean=mean(f9)*runif(1,0.1,0.2), sd=sd(f9)*runif(1,0.1,0.2))
f10 = f3+f5
f10 = f3+f5 + rnorm(10000, mean=mean(f10)*runif(1,0.1,0.2), sd=sd(f10)*runif(1,0.1,0.2))
answer = f1 + f4 + f6 + f7 + f9 + rnorm(10000, mean=mean(f1 + f4 + f6 + f7 + f9)*runif(1,0.1,0.2), sd=sd(f1 + f4 + f6 + f7 + f9)*runif(1,0.1,0.2))
df = data.frame(cbind(f1,f2,f3,f4,f5,f6,f7,f8,f9,f10,answer))
df_model = df[1:5000,]
df_test = df[5001:10000,]
summary(df_model)
plot(df_model)
PCA(df_model)
library(randtests)
library(FactoMineR)
library(lmtest)
library(dae)
PCA(df_model)
lm1 <- lm(answer ~ f1 + f2 + f3 + f4 + f5 + f6 + f7 + f8 + f9 + f10 , # regression formula
data = df_model) # data set
summary(lm1)
lm_2 <- lm(answer ~ f1 + f4 + f6 + f7 + f9, # regression formula
data=df_model) # data set
summary(lm_2)
summary(lm(f2 ~ f1 + f3 + f4 + f5 + f6 + f7 + f8 + f9 + f10, data=df_model))
summary(lm(f6 ~ f1 + f2 + f3 + f4 + f5 + f7 + f8 + f9 + f10, data=df_model))
summary(lm(f9 ~ f1 + f2 + f3 + f4 + f5 + f6 + f7 + f8 + f10, data=df_model))
summary(lm(f2 ~ f1 + f3 + f4 + f5 + f6 + f7 + f8 + f9 + f10, data=df_model))
summary(lm(f6 ~ f1 + f2 + f3 + f4 + f5 + f7 + f8 + f9 + f10, data=df_model))
summary(lm(f9 ~ f1 + f2 + f3 + f4 + f5 + f6 + f7 + f8 + f10, data=df_model))
lm_4 <- lm(answer ~ f1 + f2 + f4, # regression formula
data=df_model) # data set
summary(lm_4)
lm_5 <- lm(answer ~ f1 + f2, # regression formula
data=df_model) # data set
summary(lm_5)
df_test_use_2 = df_test[,c("f1","f4","f6","f7","f9")]
predict_output_2 = data.frame(predict(lm_2, newdata=df_test_use_2, interval="prediction"))
predict_output_realdata_2=cbind(predict_output_2, df_test[,"answer"])
colnames(predict_output_realdata_2) = c("fit", "lwr", "upr", "real")
inside_range_predict_2 = with(predict_output_realdata_2, real <= upr & real >= lwr)
no_true_predict_2 = sum(inside_range_predict_2, na.rm=TRUE)
len_range_predict_2 = length(inside_range_predict_2)
percentage_of_acceptance_predict_2 = no_true_predict_2/len_range_predict_2
percentage_of_acceptance_predict_2
df_test_use_2 = df_test[,c("f1","f4","f6","f7","f9")]
predict_output_2 = data.frame(predict(lm_2, newdata=df_test_use_2, interval="prediction"))
predict_output_realdata_2=cbind(predict_output_2, df_test[,"answer"])
colnames(predict_output_realdata_2) = c("fit", "lwr", "upr", "real")
inside_range_predict_2 = with(predict_output_realdata_2, real <= upr & real >= lwr)
no_true_predict_2 = sum(inside_range_predict_2, na.rm=TRUE)
len_range_predict_2 = length(inside_range_predict_2)
percentage_of_acceptance_predict_2 = no_true_predict_2/len_range_predict_2
percentage_of_acceptance_predict_2
df_test_use_5 = df_test[,c("f1","f2")]
predict_output_5 = data.frame(predict(lm_5, newdata=df_test_use_5, interval="prediction"))
predict_output_realdata_5=cbind(predict_output_5, df_test[,"answer"])
colnames(predict_output_realdata_5) = c("fit", "lwr", "upr", "real")
inside_range_predict_5 = with(predict_output_realdata_5, real <= upr & real >= lwr)
no_true_predict_5 = sum(inside_range_predict_5, na.rm=TRUE)
len_range_predict_5 = length(inside_range_predict_5)
percentage_of_acceptance_predict_5 = no_true_predict_5/len_range_predict_5
percentage_of_acceptance_predict_5
dwtest(lm_5, alternative = "two.sided")
shapiro.test(lm_5$residuals)
lmtest::bptest(lm_5)
df_yates = as.data.frame(matrix(data=c(min(f1),max(f1),min(f1),max(f1),min(f2),min(f2),max(f2),max(f2)),nrow=4,ncol=2))
colnames(df_yates) = c("f1","f2")
predict_output_answer = data.frame(predict(lm_5, newdata=df_yates, interval="prediction"))
df_yates = cbind(df_yates, predict_output_answer[,"fit"])
colnames(df_yates) = c("f1","f2","answer")
df_yates = rbind(df_yates,df_yates)
df_yates["f10"] = c(min(f10),min(f10),min(f10),min(f10),max(f10),max(f10),max(f10),max(f10))
df_yates = df_yates[c("f1","f2","f10","answer")]
answer=as.data.frame(df_yates["answer"])
colnames(answer) = c("answer")
answer[1,"answer"]
answer["point1"] = c(answer[1,"answer"]+answer[2,"answer"],answer[3,"answer"]+answer[4,"answer"],answer[5,"answer"]+answer[6,"answer"],answer[7,"answer"]+answer[8,"answer"],answer[2,"answer"]-answer[1,"answer"],answer[4,"answer"]-answer[3,"answer"],answer[6,"answer"]-answer[5,"answer"],answer[8,"answer"]-answer[7,"answer"])
answer["point2"] = c(answer[1,"point1"]+answer[2,"point1"],answer[3,"point1"]+answer[4,"point1"],answer[5,"point1"]+answer[6,"point1"],answer[7,"point1"]+answer[8,"point1"],answer[2,"point1"]-answer[1,"point1"],answer[4,"point1"]-answer[3,"point1"],answer[6,"point1"]-answer[5,"point1"],answer[8,"point1"]-answer[7,"point1"])
answer["point3"] = c(answer[1,"point2"]+answer[2,"point2"],answer[3,"point2"]+answer[4,"point2"],answer[5,"point2"]+answer[6,"point2"],answer[7,"point2"]+answer[8,"point2"],answer[2,"point2"]-answer[1,"point2"],answer[4,"point2"]-answer[3,"point2"],answer[6,"point2"]-answer[5,"point2"],answer[8,"point2"]-answer[7,"point2"])
answer["result"] = c(answer[1,"point3"]/8,answer[2,"point3"]/4,answer[3,"point3"]/4,answer[4,"point3"]/4,answer[5,"point3"]/4,answer[6,"point3"]/4,answer[7,"point3"]/4,answer[8,"point3"]/4)
mp <- c("-", "+")
mp
fnames <- list(f1 = mp, f2 = mp, f10 = mp)
fnames
Fac4Proc.Treats <- fac.gen(generate = fnames, order="yates")
Fac4Proc.Treats
answer["f1"]=Fac4Proc.Treats["f1"]
answer["f2"]=Fac4Proc.Treats["f2"]
answer["f10"]=Fac4Proc.Treats["f10"]
answer
df_yates
fit7_DOE <- lm(answer ~f1+f2+f10,data=df_yates)
summary(fit7_DOE)
summary(dwtest(lm5_DOE, alternative = "two.sided"))
lm5_DOE <- lm(answer ~f1+f2+f10,data=df_yates)
summary(lm5_DOE)
summary(dwtest(lm5_DOE, alternative = "two.sided"))
dwtest(lm5_DOE, alternative = "two.sided")
shapiro.test(lm5_DOE$residuals[0:5000])
lmtest::bptest(fit7_DOE)
dwtest(lm5_DOE, alternative = "two.sided")
shapiro.test(lm5_DOE$residuals[0:5000])
shapiro.test(lm5_DOE$residuals)
lmtest::bptest(fit7_DOE)
a = 0.6521
rho = 1
E = 66
b = rho * E / gamma((a+1)/a)
rweibull(n=10000, shape = a, scale = b )
samples = rweibull(n=10000, shape = a, scale = b )
mean_samples=mean(samples)
var_samples=var(samples)
par(mfrow=c(2,1), mar=c(4,4,4,4))
par(mfrow=c(2,1), mar=c(4,4,4,4))
hist(samples,main="Service Time Histogram",xlab="Service Time", ylab="Frequency", ylim=c(0,length(samples)), breaks=100, col='red')
hist(samples,main="Service Time Histogram",xlab="Service Time", ylab="Frequency", ylim=c(0,length(samples)), breaks=400, col='red')
hist(samples,main="Service Time Histogram",xlab="Service Time", ylab="Frequency", ylim=c(0,length(samples)), breaks=400, col='red')
hist(samples,main="Service Time Histogram",xlab="Service Time", ylab="Frequency", ylim=c(0,length(samples)), breaks=400, col='red')
a = 0.6521
rho = 1
E = 66
b = rho * E / gamma((a+1)/a)
samples = rweibull(n=10000, shape = a, scale = b )
mean_samples=mean(samples)
var_samples=var(samples)
mean_theoretical = b * gamma(1+1/a)
var_theoretical = b^2 * (gamma(1+2/a) - (gamma(1+1/a))^2 )
hist(samples,main="Service Time Histogram",xlab="Service Time", ylab="Frequency", ylim=c(0,length(samples)), breaks=400, col='red')
hist(samples,main="Service Time Histogram",xlab="Service Time", ylab="Frequency", ylim=c(0,length(samples)), col='red')
hist(samples,main="Service Time Histogram",xlab="Service Time", ylab="Frequency", ylim=c(0,length(samples)), breaks=400, col='red')
hist(samples,main="Service Time Histogram",xlab="Service Time", ylab="Frequency", ylim=c(0,length(samples)), breaks=100, col='red')
hist(samples,main="Service Time Histogram",xlab="Service Time", ylab="Frequency", ylim=c(0,length(samples)), col='red')
hist(X,main="Zoom",xlab="Service Time", ylab="Frequency",breaks=200, col='red')
hist(samples,main="Zoom",xlab="Service Time", ylab="Frequency",breaks=200, col='red')
hist(samples,main="Service Time Histogram",xlab="Service Time", ylab="Frequency", col='red')
hist(samples,main="Zoom",xlab="Service Time", ylab="Frequency",breaks=200, col='red')
hist(samples,main="Service Time Histogram",xlab="Service Time", ylab="Frequency", col='red')
hist(X,main="Zoom",xlab="Service Time", ylab="Frequency",xlim=c(0,300), breaks=200, col='red')
hist(samples,main="Zoom",xlab="Service Time", ylab="Frequency",xlim=c(0,300), breaks=200, col='red')
hist(samples,main="Zoom",xlab="Service Time", ylab="Frequency",xlim=c(0,200), breaks=200, col='red')
hist(samples,main="Zoom",xlab="Service Time", ylab="Frequency",xlim=c(0,100), breaks=200, col='red')
hist(samples,main="Zoom",xlab="Service Time", ylab="Frequency",xlim=c(0,100), col='red')
hist(samples,main="Zoom",xlab="Service Time", ylab="Frequency",xlim=c(0,200), breaks=200, col='red')
hist(samples,main="Service Time Histogram",xlab="Service Time", ylab="Frequency", col='red')
hist(samples,main="Service Time Histogram",xlab="Service Time", ylab="Frequency", breaks = 100, col='red')
hist(samples,main="Zoom",xlab="Service Time", ylab="Frequency",xlim=c(0,200), breaks=200, col='red')
hist(samples,main="Service Time Histogram",xlab="Service Time", ylab="Frequency", breaks = 100, col='red')
hist(samples,main="Zoom",xlab="Service Time", ylab="Frequency",xlim=c(0,200), breaks=200, col='red')
a = 0.6521
rho = 1
E = 66
b = rho * E / gamma((a+1)/a)
samples = rweibull(n=10000, shape = a, scale = b )
mean_samples=mean(samples)
var_samples=var(samples)
mean_theoretical = b * gamma(1+1/a)
var_theoretical = b^2 * (gamma(1+2/a) - (gamma(1+1/a))^2 )
hist(samples,main="Service Time Histogram",xlab="Service Time", ylab="Frequency", breaks = 100, col='red')
hist(samples,main="Zoom",xlab="Service Time", ylab="Frequency",xlim=c(0,200), breaks=200, col='red')
mean_samples
mean_theoretical
var_samples
var_theoretical
samples = rweibull(n=10000, shape = a, scale = b )
var_samples=var(samples)
var_theoretical
samples = rweibull(n=10000, shape = a, scale = b )
var_samples=var(samples)
var_samples
var(rweibull(n=10000, shape = a, scale = b ))
var(rweibull(n=10000, shape = a, scale = b ))
var(rweibull(n=10000, shape = a, scale = b ))
var(rweibull(n=10000, shape = a, scale = b ))
var(rweibull(n=10000, shape = a, scale = b ))
var(rweibull(n=10000, shape = a, scale = b ))
var(rweibull(n=10000, shape = a, scale = b ))
var(rweibull(n=10000, shape = a, scale = b ))
p=[0.4 0.7 0.85 0.925]
p=[0.4, 0.7, 0.85, 0.925]
p=(0.4, 0.7, 0.85, 0.925)
p=c(0.4, 0.7, 0.85, 0.925)
p
N = 100000
analysisServTime=function() {
a = 0.6521
E_tau = 66
rho = 0.4
N=10000
b = create_b(rho)
samples = rweibull(N, shape = a, scale = b )
mean_service_samples = mean(samples)
var_service_samples = var(samples)
coeff_var_service_samples = sqrt(var_service_samples)/mean_service_samples
mean_service_theoretical = getMeanVarianceWeibull(rho)$mean
var_service_theoretical = getMeanVarianceWeibull(rho)$var
coeff_var_service_theoretical = getMeanVarianceWeibull(rho)$coeff_var
par(mfrow=c(2,1), mar=c(4,4,4,4))
#histogram on all the sample :
hist(samples,main="Service Time Histogram",xlab="Service Time",
ylab="Frequency", breaks = 100, col='red')
#histogram zoom on the revelant part :
hist(samples,main="Zoom",xlab="Service Time", ylab="Frequency",
xlim=c(0,200), breaks=200, col='red')
return(list(mean_service_samples=mean_service_samples,
mean_service_theoretical=mean_service_theoretical,
var_service_samples=var_service_samples,
var_service_theoretical=var_service_theoretical,
coeff_var_service_samples=coeff_var_service_samples,
coeff_var_service_theoretical=coeff_var_service_theoretical))
}
create_b=function(p,E_tau=66,a=0.6521) {
return (p * E_tau / gamma((a+1)/a))
}
getMeanVarianceErlang=function(k=3, E_tau = 66){
mean=E_tau
lambda = k/E_tau
var=k/(lambda)^2
return(list(mean=mean, variance=var))
}
getMeanVarianceWeibull <- function(p, a=0.6521) {
b = create_b(p)
mean = b * gamma(1+1/a)
variance = b^2 * (gamma(1+2/a) - (gamma(1+1/a))^2 )
coeff_var = sqrt(variance)/mean
return(list=list(mean = mean, var = variance, coeff_var = coeff_var))
}
allen_cunnen_approx <- function(p) {
#Obtain mean and variance for arrival times and service times for better accuracy
#Using above given formulas
E_tau <- getMeanVarianceErlang()$mean
E_x <- getMeanVarianceWeibull(p)$mean
var_tau <- getMeanVarianceErlang()$var
var_x <- getMeanVarianceWeibull(p)$var
lambda <- 1/E_tau
mu <- 1/E_x
omega <-lambda/mu
C <- omega/(1-p+omega)
Wq_approx <- C*(lambda^2*var_tau + mu^2*var_x)/(2*mu*(1-p))
return(Wq_approx)
}
confidence_inter=function(simu) {
print("Interval and mean for Wq")
for(i in 1:length(simu)){
conf_inter=t.test(simu[[i]]$wq)
print(conf_inter$conf.int)
print(conf_inter$estimate)
}
print("Interval and mean for Lq")
for(i in 1:length(simu)){
conf_inter=t.test(simu[[i]]$wq)
print((conf_inter$conf.int*simu[[i]]$N)/simu[[i]]$tn)
print((conf_inter$estimate*simu[[i]]$N)/simu[[i]]$tn)
}
}
GenerateData=function(p,N=100000) {
a = 0.6521
b = create_b(p)
#generation of service times
X = rweibull(N, shape = a, scale = b )
E_tau = 66
E_stage = 22
K = 3 #shape
#generation of arrival times with rate=1/E(stage)
tau = rgamma(N, shape = K, rate = 1/E_stage)
#Initialization of statistics variables
L=0; W=0; Lq=0; Wq=0;
t=vector(mode='numeric', length=N)
t[1]=0
ts=vector(mode='numeric', length=N)
ts[1]=0
teta=vector(mode='numeric', length=N)
teta[1]=-1/0
wq=vector(mode='numeric', length=N)
wq[1]=ts[1]-t[1]
w=vector(mode='numeric', length=N)
w[1]=wq[1]+X[1]
Li=vector(mode='numeric', length=N)
Li[1]=w[1]
L=L+Li[1]
LT=vector(mode='numeric', length=N)
LT[1]=0
lq=vector(mode='numeric', length=N)
lq[1]=wq[1]
#Recurrent calculation of the statistics
for(i in 2:N){
t[i]=t[i-1]+tau[i-1]
ts[i]=max(teta[i-1],t[i])
teta[i]=ts[i]+X[i]
wq[i]=ts[i]-t[i]
w[i]=wq[i]+X[i]
Li[i]=w[i]
L=L+Li[i]
LT[i]=L/(t[i]-t[1])
lq[i]=wq[i]
Lq=Lq+lq[i]
}
#After N clients :
W=sum(w)/N
Wq=sum(wq)/N
L=L/t[N]
Lq=Lq/t[N]
return(list(W=W,Wq=Wq,L=L,Lq=Lq,t=t,LT=LT,lq=lq, wq=wq,N=N,tn=t[N]))
}
main=function(p,N){
#Generation of 10 simulations
simu=list(GenerateData(p,N))
simuWq=vector(mode='numeric', length=10)
simuWq[1]=simu[[1]]$Wq
simuLq=vector(mode='numeric', length=10)
simuLq[1]=simu[[1]]$Lq
simuW=vector(mode='numeric', length=10)
simuW[1]=simu[[1]]$W
simuL=vector(mode='numeric', length=10)
simuL[1]=simu[[1]]$L
for(i in 2:10){
simu=c(simu, list(GenerateData(p,N)))
simuWq[i]=simu[[i]]$Wq
simuLq[i]=simu[[i]]$Lq
simuW[i]=simu[[i]]$W
simuL[i]=simu[[i]]$L
}
#plot the LT parameter versus t for the 10 generations
file_name=sprintf("./LT_vs_t.jpeg")
jpeg(filename=file_name)
par(mfrow=c(5,2), mar=c(1,1,1,1))
for(i in 1:10){
plot(simu[[i]]$t,simu[[i]]$LT,type='l',xlab='t',ylab='LT')
}
dev.off()
#Calculate theorical Allen Cuneen values:
Approx=allen_cunnen_approx(p)
#Calcul of theorical W,Lq,L values with Allen Cuneen approximation
#TheoricW=Approx+p*78
#Confidence interval of the 10 simulations
confidence_inter(simu)
return(list(Allen_Cuneen=Approx,
simuWq=simuWq,simuLq=simuLq,simuW=simuW,
simuL=simuL,meanWq=mean(simuWq),meanLq=mean(simuLq),
meanW=mean(simuW),meanL=mean(simuL)))
}
p=c(0.4, 0.7, 0.85, 0.925)
N = 100000
analysisServTime()
0.4*66
main(p[1],N)
p=c(0.4, 0.7, 0.85, 0.925)
N = 100000
main(p[1],N)
setwd("~/Documents/SMDE/lab/lab3")
main(p[1],N)
main(p[2],N)
main(p[3],N)
main(p[4],N)
N = 1000000
main(p[4],N)
